{"ast":null,"code":"var _jsxFileName = \"/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { ReactFlow, addEdge, Controls, Background, MiniMap, useReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\nimport ContextMenu from './ContextMenu';\nimport { saveAnimalData } from '../utils/storage-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction FlowCanvas({\n  nodes: initialNodes,\n  edges: initialEdges,\n  onUpdate,\n  onGranjaClick,\n  onAnimalUpdate,\n  canvasId\n}) {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const [contextMenu, setContextMenu] = useState({\n    show: false,\n    position: null,\n    sourceNode: null\n  });\n  const reactFlowWrapper = useRef(null);\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => {\n      let updatedNodes = [...nds];\n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => node.id === change.id ? {\n            ...node,\n            position: change.position\n          } : node);\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      return updatedNodes;\n    });\n  }, []);\n  const onEdgesChange = useCallback(changes => {\n    setEdges(eds => {\n      let updatedEdges = [...eds];\n      changes.forEach(change => {\n        if (change.type === 'remove') {\n          updatedEdges = updatedEdges.filter(edge => edge.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedEdges = [...updatedEdges, change.item];\n        }\n      });\n      return updatedEdges;\n    });\n  }, []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, []);\n  const onNodeClick = useCallback((event, node) => {\n    console.log('Node clicked:', node);\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n  const onNodeContextMenu = useCallback((event, node) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      sourceNode: node\n    });\n  }, []);\n  const onPaneContextMenu = useCallback(event => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      sourceNode: null\n    });\n  }, []);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    if (onUpdate) {\n      onUpdate(nodes, edges);\n    }\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas apenas na primeira renderização\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, []); // Array vazio para executar apenas uma vez\n\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local dos nós imediatamente\n    setNodes(prevNodes => prevNodes.map(node => node.id === animalId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...animalData,\n        // Atualizar o animalName para refletir no canvas\n        animalName: animalData.nome || node.data.animalName\n      }\n    } : node));\n\n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n\n    // Fechar o painel\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n  const handleCloseContextMenu = useCallback(() => {\n    setContextMenu({\n      show: false,\n      position: null,\n      sourceNode: null\n    });\n  }, []);\n  const handleCreateArtifact = useCallback((artifactType, position) => {\n    const newNodeId = `${artifactType.id}-${Date.now()}`;\n\n    // Gerar nome único para animais\n    let animalName = artifactType.label;\n    if (artifactType.type === 'animal') {\n      const randomIndex = Math.floor(Math.random() * 24);\n      const names = ['Buddy', 'Max', 'Luna', 'Rocky', 'Bella', 'Charlie', 'Lucy', 'Cooper', 'Daisy', 'Bear', 'Molly', 'Duke', 'Sophie', 'Jack', 'Ruby', 'Oliver', 'Chloe', 'Tucker', 'Penny', 'Winston', 'Lola', 'Murphy', 'Zoe', 'Finn'];\n      animalName = names[randomIndex];\n    }\n\n    // Calcular posição do novo nó baseada no nó de origem\n    let newNodePosition;\n    if (contextMenu.sourceNode) {\n      const sourcePos = contextMenu.sourceNode.position;\n      newNodePosition = {\n        x: sourcePos.x + 200,\n        // 200px à direita do nó de origem\n        y: sourcePos.y + 100 // 100px abaixo do nó de origem\n      };\n    } else {\n      // Se não houver nó de origem, usar a posição do clique\n      newNodePosition = {\n        x: position.x - 100,\n        y: position.y - 50\n      };\n    }\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newNodePosition,\n      data: {\n        ...artifactType,\n        animalName: artifactType.type === 'animal' ? animalName : artifactType.label,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      }\n    };\n\n    // Criar uma nova conexão se houver um nó de origem\n    let newEdge = null;\n    if (contextMenu.sourceNode) {\n      const edgeId = `${contextMenu.sourceNode.id}-${newNodeId}`;\n      newEdge = {\n        id: edgeId,\n        source: contextMenu.sourceNode.id,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: false,\n        style: {\n          stroke: contextMenu.sourceNode.data.color || '#666',\n          strokeWidth: 3,\n          strokeDasharray: '5,5' // Linha tracejada para destacar\n        },\n        label: 'Novo',\n        // Label para identificar a conexão\n        labelStyle: {\n          fill: contextMenu.sourceNode.data.color || '#666',\n          fontWeight: 'bold',\n          fontSize: '12px'\n        }\n      };\n    }\n\n    // Adicionar o novo nó e edge\n    setNodes(prevNodes => [...prevNodes, newNode]);\n    if (newEdge) {\n      setEdges(prevEdges => [...prevEdges, newEdge]);\n    }\n\n    // Atualizar o estado global\n    if (onUpdate) {\n      const updatedNodes = [...nodes, newNode];\n      const updatedEdges = newEdge ? [...edges, newEdge] : edges;\n      onUpdate(updatedNodes, updatedEdges);\n    }\n\n    // Se for um animal, salvar dados iniciais no localStorage e abrir painel\n    if (artifactType.type === 'animal') {\n      const initialData = {\n        nome: animalName,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      };\n      saveAnimalData(newNodeId, initialData);\n      setSelectedAnimal(newNode);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [nodes, edges, onUpdate, contextMenu.sourceNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-canvas\",\n    ref: reactFlowWrapper,\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onNodeContextMenu: onNodeContextMenu,\n      onPaneContextMenu: onPaneContextMenu,\n      nodeTypes: nodeTypes,\n      ...FLOW_CONFIG,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.data.type) {\n            case 'granja':\n              return '#ff6b6b';\n            case 'animal':\n              return '#4ecdc4';\n            default:\n              return '#95a5a6';\n          }\n        },\n        nodeStrokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimalDetailsPanel, {\n      animal: selectedAnimal,\n      isOpen: isDetailsPanelOpen,\n      onClose: handleCloseDetailsPanel,\n      onSave: handleSaveAnimal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      position: contextMenu.position,\n      onClose: handleCloseContextMenu,\n      onCreateArtifact: handleCreateArtifact,\n      sourceNode: contextMenu.sourceNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowCanvas, \"tZJpv1RN8+M7z/qEW5XtGGwoRZY=\");\n_c = FlowCanvas;\nexport default FlowCanvas;\nvar _c;\n$RefreshReg$(_c, \"FlowCanvas\");","map":{"version":3,"names":["React","useCallback","useRef","useState","useEffect","ReactFlow","addEdge","Controls","Background","MiniMap","useReactFlow","CustomNode","FLOW_CONFIG","AnimalDetailsPanel","ContextMenu","saveAnimalData","jsxDEV","_jsxDEV","nodeTypes","custom","FlowCanvas","nodes","initialNodes","edges","initialEdges","onUpdate","onGranjaClick","onAnimalUpdate","canvasId","_s","setNodes","setEdges","selectedAnimal","setSelectedAnimal","isDetailsPanelOpen","setIsDetailsPanelOpen","contextMenu","setContextMenu","show","position","sourceNode","reactFlowWrapper","onNodesChange","changes","nds","updatedNodes","forEach","change","type","map","node","id","filter","item","onEdgesChange","eds","updatedEdges","edge","onConnect","params","onNodeClick","event","console","log","data","onNodeContextMenu","preventDefault","x","clientX","y","clientY","onPaneContextMenu","handleSaveAnimal","animalId","animalData","prevNodes","animalName","nome","handleCloseDetailsPanel","handleCloseContextMenu","handleCreateArtifact","artifactType","newNodeId","Date","now","label","randomIndex","Math","floor","random","names","newNodePosition","sourcePos","newNode","apelido","peso","idade","responsavel","newEdge","edgeId","source","target","animated","style","stroke","color","strokeWidth","strokeDasharray","labelStyle","fill","fontWeight","fontSize","prevEdges","initialData","className","ref","children","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","gap","nodeColor","nodeStrokeWidth","animal","isOpen","onClose","onSave","onCreateArtifact","_c","$RefreshReg$"],"sources":["/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js"],"sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport {\n  ReactFlow,\n  addEdge,\n  Controls,\n  Background,\n  MiniMap,\n  useReactFlow\n} from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\nimport ContextMenu from './ContextMenu';\nimport { saveAnimalData } from '../utils/storage-utils';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nfunction FlowCanvas({ nodes: initialNodes, edges: initialEdges, onUpdate, onGranjaClick, onAnimalUpdate, canvasId }) {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const [contextMenu, setContextMenu] = useState({ show: false, position: null, sourceNode: null });\n  const reactFlowWrapper = useRef(null);\n\n  const onNodesChange = useCallback((changes) => {\n    setNodes((nds) => {\n      let updatedNodes = [...nds];\n      \n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => \n            node.id === change.id \n              ? { ...node, position: change.position }\n              : node\n          );\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      \n      return updatedNodes;\n    });\n  }, []);\n\n  const onEdgesChange = useCallback((changes) => {\n    setEdges((eds) => {\n      let updatedEdges = [...eds];\n      \n      changes.forEach(change => {\n        if (change.type === 'remove') {\n          updatedEdges = updatedEdges.filter(edge => edge.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedEdges = [...updatedEdges, change.item];\n        }\n      });\n      \n      return updatedEdges;\n    });\n  }, []);\n\n  const onConnect = useCallback(\n    (params) => {\n      setEdges((eds) => addEdge(params, eds));\n    },\n    []\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    console.log('Node clicked:', node);\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n\n  const onNodeContextMenu = useCallback((event, node) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: { x: event.clientX, y: event.clientY },\n      sourceNode: node\n    });\n  }, []);\n\n  const onPaneContextMenu = useCallback((event) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: { x: event.clientX, y: event.clientY },\n      sourceNode: null\n    });\n  }, []);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    if (onUpdate) {\n      onUpdate(nodes, edges);\n    }\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas apenas na primeira renderização\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, []); // Array vazio para executar apenas uma vez\n\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local dos nós imediatamente\n    setNodes(prevNodes => \n      prevNodes.map(node => \n        node.id === animalId \n          ? { \n              ...node, \n              data: { \n                ...node.data, \n                ...animalData,\n                // Atualizar o animalName para refletir no canvas\n                animalName: animalData.nome || node.data.animalName\n              } \n            }\n          : node\n      )\n    );\n    \n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n    \n    // Fechar o painel\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n\n  const handleCloseContextMenu = useCallback(() => {\n    setContextMenu({ show: false, position: null, sourceNode: null });\n  }, []);\n\n  const handleCreateArtifact = useCallback((artifactType, position) => {\n    const newNodeId = `${artifactType.id}-${Date.now()}`;\n    \n    // Gerar nome único para animais\n    let animalName = artifactType.label;\n    if (artifactType.type === 'animal') {\n      const randomIndex = Math.floor(Math.random() * 24);\n      const names = ['Buddy', 'Max', 'Luna', 'Rocky', 'Bella', 'Charlie', 'Lucy', 'Cooper', 'Daisy', 'Bear', 'Molly', 'Duke', 'Sophie', 'Jack', 'Ruby', 'Oliver', 'Chloe', 'Tucker', 'Penny', 'Winston', 'Lola', 'Murphy', 'Zoe', 'Finn'];\n      animalName = names[randomIndex];\n    }\n    \n    // Calcular posição do novo nó baseada no nó de origem\n    let newNodePosition;\n    if (contextMenu.sourceNode) {\n      const sourcePos = contextMenu.sourceNode.position;\n      newNodePosition = {\n        x: sourcePos.x + 200, // 200px à direita do nó de origem\n        y: sourcePos.y + 100  // 100px abaixo do nó de origem\n      };\n    } else {\n      // Se não houver nó de origem, usar a posição do clique\n      newNodePosition = { x: position.x - 100, y: position.y - 50 };\n    }\n    \n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newNodePosition,\n      data: {\n        ...artifactType,\n        animalName: artifactType.type === 'animal' ? animalName : artifactType.label,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      }\n    };\n\n    // Criar uma nova conexão se houver um nó de origem\n    let newEdge = null;\n    if (contextMenu.sourceNode) {\n      const edgeId = `${contextMenu.sourceNode.id}-${newNodeId}`;\n      newEdge = {\n        id: edgeId,\n        source: contextMenu.sourceNode.id,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: false,\n        style: { \n          stroke: contextMenu.sourceNode.data.color || '#666', \n          strokeWidth: 3,\n          strokeDasharray: '5,5' // Linha tracejada para destacar\n        },\n        label: 'Novo', // Label para identificar a conexão\n        labelStyle: {\n          fill: contextMenu.sourceNode.data.color || '#666',\n          fontWeight: 'bold',\n          fontSize: '12px'\n        }\n      };\n    }\n\n    // Adicionar o novo nó e edge\n    setNodes(prevNodes => [...prevNodes, newNode]);\n    if (newEdge) {\n      setEdges(prevEdges => [...prevEdges, newEdge]);\n    }\n    \n    // Atualizar o estado global\n    if (onUpdate) {\n      const updatedNodes = [...nodes, newNode];\n      const updatedEdges = newEdge ? [...edges, newEdge] : edges;\n      onUpdate(updatedNodes, updatedEdges);\n    }\n    \n    // Se for um animal, salvar dados iniciais no localStorage e abrir painel\n    if (artifactType.type === 'animal') {\n      const initialData = {\n        nome: animalName,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      };\n      \n      saveAnimalData(newNodeId, initialData);\n      setSelectedAnimal(newNode);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [nodes, edges, onUpdate, contextMenu.sourceNode]);\n\n  return (\n    <div className=\"flow-canvas\" ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onNodeContextMenu={onNodeContextMenu}\n        onPaneContextMenu={onPaneContextMenu}\n        nodeTypes={nodeTypes}\n        {...FLOW_CONFIG}\n        attributionPosition=\"bottom-left\"\n      >\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n        <MiniMap\n          nodeColor={(node) => {\n            switch (node.data.type) {\n              case 'granja':\n                return '#ff6b6b';\n              case 'animal':\n                return '#4ecdc4';\n              default:\n                return '#95a5a6';\n            }\n          }}\n          nodeStrokeWidth={3}\n        />\n      </ReactFlow>\n      \n      <AnimalDetailsPanel\n        animal={selectedAnimal}\n        isOpen={isDetailsPanelOpen}\n        onClose={handleCloseDetailsPanel}\n        onSave={handleSaveAnimal}\n      />\n      \n      <ContextMenu\n        position={contextMenu.position}\n        onClose={handleCloseContextMenu}\n        onCreateArtifact={handleCreateArtifact}\n        sourceNode={contextMenu.sourceNode}\n      />\n    </div>\n  );\n}\n\nexport default FlowCanvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACvE,SACEC,SAAS,EACTC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,YAAY,QACP,eAAe;AACtB,OAAO,8BAA8B;AACrC,OAAO,kBAAkB;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,WAAW,QAAQ,uBAAuB;AACnD,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAER;AACV,CAAC;AAED,SAASS,UAAUA,CAAC;EAAEC,KAAK,EAAEC,YAAY;EAAEC,KAAK,EAAEC,YAAY;EAAEC,QAAQ;EAAEC,aAAa;EAAEC,cAAc;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnH,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAG3B,QAAQ,CAACmB,YAAY,CAAC;EAChD,MAAM,CAACC,KAAK,EAAEQ,QAAQ,CAAC,GAAG5B,QAAQ,CAACqB,YAAY,CAAC;EAChD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC+B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACiC,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC;IAAEmC,IAAI,EAAE,KAAK;IAAEC,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC;EACjG,MAAMC,gBAAgB,GAAGvC,MAAM,CAAC,IAAI,CAAC;EAErC,MAAMwC,aAAa,GAAGzC,WAAW,CAAE0C,OAAO,IAAK;IAC7Cb,QAAQ,CAAEc,GAAG,IAAK;MAChB,IAAIC,YAAY,GAAG,CAAC,GAAGD,GAAG,CAAC;MAE3BD,OAAO,CAACG,OAAO,CAACC,MAAM,IAAI;QACxB,IAAIA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;UAC9BH,YAAY,GAAGA,YAAY,CAACI,GAAG,CAACC,IAAI,IAClCA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE,GACjB;YAAE,GAAGD,IAAI;YAAEX,QAAQ,EAAEQ,MAAM,CAACR;UAAS,CAAC,GACtCW,IACN,CAAC;QACH,CAAC,MAAM,IAAIH,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;UACnCH,YAAY,GAAGA,YAAY,CAACO,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE,CAAC;QACnE,CAAC,MAAM,IAAIJ,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;UAChCH,YAAY,GAAG,CAAC,GAAGA,YAAY,EAAEE,MAAM,CAACM,IAAI,CAAC;QAC/C;MACF,CAAC,CAAC;MAEF,OAAOR,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,aAAa,GAAGrD,WAAW,CAAE0C,OAAO,IAAK;IAC7CZ,QAAQ,CAAEwB,GAAG,IAAK;MAChB,IAAIC,YAAY,GAAG,CAAC,GAAGD,GAAG,CAAC;MAE3BZ,OAAO,CAACG,OAAO,CAACC,MAAM,IAAI;QACxB,IAAIA,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;UAC5BQ,YAAY,GAAGA,YAAY,CAACJ,MAAM,CAACK,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKJ,MAAM,CAACI,EAAE,CAAC;QACnE,CAAC,MAAM,IAAIJ,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;UAChCQ,YAAY,GAAG,CAAC,GAAGA,YAAY,EAAET,MAAM,CAACM,IAAI,CAAC;QAC/C;MACF,CAAC,CAAC;MAEF,OAAOG,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,SAAS,GAAGzD,WAAW,CAC1B0D,MAAM,IAAK;IACV5B,QAAQ,CAAEwB,GAAG,IAAKjD,OAAO,CAACqD,MAAM,EAAEJ,GAAG,CAAC,CAAC;EACzC,CAAC,EACD,EACF,CAAC;EAED,MAAMK,WAAW,GAAG3D,WAAW,CAAC,CAAC4D,KAAK,EAAEX,IAAI,KAAK;IAC/CY,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEb,IAAI,CAAC;IAClC,IAAIA,IAAI,CAACc,IAAI,CAAChB,IAAI,KAAK,QAAQ,EAAE;MAC/BtB,aAAa,CAACwB,IAAI,CAACC,EAAE,CAAC;IACxB,CAAC,MAAM,IAAID,IAAI,CAACc,IAAI,CAAChB,IAAI,KAAK,QAAQ,EAAE;MACtCf,iBAAiB,CAACiB,IAAI,CAAC;MACvBf,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,CAACT,aAAa,CAAC,CAAC;EAEnB,MAAMuC,iBAAiB,GAAGhE,WAAW,CAAC,CAAC4D,KAAK,EAAEX,IAAI,KAAK;IACrDW,KAAK,CAACK,cAAc,CAAC,CAAC;IACtB7B,cAAc,CAAC;MACbC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE;QAAE4B,CAAC,EAAEN,KAAK,CAACO,OAAO;QAAEC,CAAC,EAAER,KAAK,CAACS;MAAQ,CAAC;MAChD9B,UAAU,EAAEU;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMqB,iBAAiB,GAAGtE,WAAW,CAAE4D,KAAK,IAAK;IAC/CA,KAAK,CAACK,cAAc,CAAC,CAAC;IACtB7B,cAAc,CAAC;MACbC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE;QAAE4B,CAAC,EAAEN,KAAK,CAACO,OAAO;QAAEC,CAAC,EAAER,KAAK,CAACS;MAAQ,CAAC;MAChD9B,UAAU,EAAE;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApC,SAAS,CAAC,MAAM;IACd,IAAIqB,QAAQ,EAAE;MACZA,QAAQ,CAACJ,KAAK,EAAEE,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACF,KAAK,EAAEE,KAAK,EAAEE,QAAQ,CAAC,CAAC;;EAE5B;EACArB,SAAS,CAAC,MAAM;IACd0B,QAAQ,CAACR,YAAY,CAAC;IACtBS,QAAQ,CAACP,YAAY,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMgD,gBAAgB,GAAGvE,WAAW,CAAC,CAACwE,QAAQ,EAAEC,UAAU,KAAK;IAC7D;IACA5C,QAAQ,CAAC6C,SAAS,IAChBA,SAAS,CAAC1B,GAAG,CAACC,IAAI,IAChBA,IAAI,CAACC,EAAE,KAAKsB,QAAQ,GAChB;MACE,GAAGvB,IAAI;MACPc,IAAI,EAAE;QACJ,GAAGd,IAAI,CAACc,IAAI;QACZ,GAAGU,UAAU;QACb;QACAE,UAAU,EAAEF,UAAU,CAACG,IAAI,IAAI3B,IAAI,CAACc,IAAI,CAACY;MAC3C;IACF,CAAC,GACD1B,IACN,CACF,CAAC;;IAED;IACA,IAAIvB,cAAc,EAAE;MAClBA,cAAc,CAAC8C,QAAQ,EAAEC,UAAU,CAAC;IACtC;;IAEA;IACAvC,qBAAqB,CAAC,KAAK,CAAC;IAC5BF,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,CAACN,cAAc,CAAC,CAAC;EAEpB,MAAMmD,uBAAuB,GAAG7E,WAAW,CAAC,MAAM;IAChDkC,qBAAqB,CAAC,KAAK,CAAC;IAC5BF,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM8C,sBAAsB,GAAG9E,WAAW,CAAC,MAAM;IAC/CoC,cAAc,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,QAAQ,EAAE,IAAI;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMwC,oBAAoB,GAAG/E,WAAW,CAAC,CAACgF,YAAY,EAAE1C,QAAQ,KAAK;IACnE,MAAM2C,SAAS,GAAG,GAAGD,YAAY,CAAC9B,EAAE,IAAIgC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;;IAEpD;IACA,IAAIR,UAAU,GAAGK,YAAY,CAACI,KAAK;IACnC,IAAIJ,YAAY,CAACjC,IAAI,KAAK,QAAQ,EAAE;MAClC,MAAMsC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;MAClD,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC;MACnOd,UAAU,GAAGc,KAAK,CAACJ,WAAW,CAAC;IACjC;;IAEA;IACA,IAAIK,eAAe;IACnB,IAAIvD,WAAW,CAACI,UAAU,EAAE;MAC1B,MAAMoD,SAAS,GAAGxD,WAAW,CAACI,UAAU,CAACD,QAAQ;MACjDoD,eAAe,GAAG;QAChBxB,CAAC,EAAEyB,SAAS,CAACzB,CAAC,GAAG,GAAG;QAAE;QACtBE,CAAC,EAAEuB,SAAS,CAACvB,CAAC,GAAG,GAAG,CAAE;MACxB,CAAC;IACH,CAAC,MAAM;MACL;MACAsB,eAAe,GAAG;QAAExB,CAAC,EAAE5B,QAAQ,CAAC4B,CAAC,GAAG,GAAG;QAAEE,CAAC,EAAE9B,QAAQ,CAAC8B,CAAC,GAAG;MAAG,CAAC;IAC/D;IAEA,MAAMwB,OAAO,GAAG;MACd1C,EAAE,EAAE+B,SAAS;MACblC,IAAI,EAAE,QAAQ;MACdT,QAAQ,EAAEoD,eAAe;MACzB3B,IAAI,EAAE;QACJ,GAAGiB,YAAY;QACfL,UAAU,EAAEK,YAAY,CAACjC,IAAI,KAAK,QAAQ,GAAG4B,UAAU,GAAGK,YAAY,CAACI,KAAK;QAC5ES,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE;MACf;IACF,CAAC;;IAED;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAI9D,WAAW,CAACI,UAAU,EAAE;MAC1B,MAAM2D,MAAM,GAAG,GAAG/D,WAAW,CAACI,UAAU,CAACW,EAAE,IAAI+B,SAAS,EAAE;MAC1DgB,OAAO,GAAG;QACR/C,EAAE,EAAEgD,MAAM;QACVC,MAAM,EAAEhE,WAAW,CAACI,UAAU,CAACW,EAAE;QACjCkD,MAAM,EAAEnB,SAAS;QACjBlC,IAAI,EAAE,YAAY;QAClBsD,QAAQ,EAAE,KAAK;QACfC,KAAK,EAAE;UACLC,MAAM,EAAEpE,WAAW,CAACI,UAAU,CAACwB,IAAI,CAACyC,KAAK,IAAI,MAAM;UACnDC,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,KAAK,CAAC;QACzB,CAAC;QACDtB,KAAK,EAAE,MAAM;QAAE;QACfuB,UAAU,EAAE;UACVC,IAAI,EAAEzE,WAAW,CAACI,UAAU,CAACwB,IAAI,CAACyC,KAAK,IAAI,MAAM;UACjDK,UAAU,EAAE,MAAM;UAClBC,QAAQ,EAAE;QACZ;MACF,CAAC;IACH;;IAEA;IACAjF,QAAQ,CAAC6C,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEkB,OAAO,CAAC,CAAC;IAC9C,IAAIK,OAAO,EAAE;MACXnE,QAAQ,CAACiF,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEd,OAAO,CAAC,CAAC;IAChD;;IAEA;IACA,IAAIzE,QAAQ,EAAE;MACZ,MAAMoB,YAAY,GAAG,CAAC,GAAGxB,KAAK,EAAEwE,OAAO,CAAC;MACxC,MAAMrC,YAAY,GAAG0C,OAAO,GAAG,CAAC,GAAG3E,KAAK,EAAE2E,OAAO,CAAC,GAAG3E,KAAK;MAC1DE,QAAQ,CAACoB,YAAY,EAAEW,YAAY,CAAC;IACtC;;IAEA;IACA,IAAIyB,YAAY,CAACjC,IAAI,KAAK,QAAQ,EAAE;MAClC,MAAMiE,WAAW,GAAG;QAClBpC,IAAI,EAAED,UAAU;QAChBkB,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE;MACf,CAAC;MAEDlF,cAAc,CAACmE,SAAS,EAAE+B,WAAW,CAAC;MACtChF,iBAAiB,CAAC4D,OAAO,CAAC;MAC1B1D,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,CAACd,KAAK,EAAEE,KAAK,EAAEE,QAAQ,EAAEW,WAAW,CAACI,UAAU,CAAC,CAAC;EAEpD,oBACEvB,OAAA;IAAKiG,SAAS,EAAC,aAAa;IAACC,GAAG,EAAE1E,gBAAiB;IAAA2E,QAAA,gBACjDnG,OAAA,CAACZ,SAAS;MACRgB,KAAK,EAAEA,KAAM;MACbE,KAAK,EAAEA,KAAM;MACbmB,aAAa,EAAEA,aAAc;MAC7BY,aAAa,EAAEA,aAAc;MAC7BI,SAAS,EAAEA,SAAU;MACrBE,WAAW,EAAEA,WAAY;MACzBK,iBAAiB,EAAEA,iBAAkB;MACrCM,iBAAiB,EAAEA,iBAAkB;MACrCrD,SAAS,EAAEA,SAAU;MAAA,GACjBN,WAAW;MACfyG,mBAAmB,EAAC,aAAa;MAAAD,QAAA,gBAEjCnG,OAAA,CAACV,QAAQ;QAAA+G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZxG,OAAA,CAACT,UAAU;QAACiG,KAAK,EAAC,MAAM;QAACiB,GAAG,EAAE;MAAG;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpCxG,OAAA,CAACR,OAAO;QACNkH,SAAS,EAAGzE,IAAI,IAAK;UACnB,QAAQA,IAAI,CAACc,IAAI,CAAChB,IAAI;YACpB,KAAK,QAAQ;cACX,OAAO,SAAS;YAClB,KAAK,QAAQ;cACX,OAAO,SAAS;YAClB;cACE,OAAO,SAAS;UACpB;QACF,CAAE;QACF4E,eAAe,EAAE;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAEZxG,OAAA,CAACJ,kBAAkB;MACjBgH,MAAM,EAAE7F,cAAe;MACvB8F,MAAM,EAAE5F,kBAAmB;MAC3B6F,OAAO,EAAEjD,uBAAwB;MACjCkD,MAAM,EAAExD;IAAiB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAEFxG,OAAA,CAACH,WAAW;MACVyB,QAAQ,EAAEH,WAAW,CAACG,QAAS;MAC/BwF,OAAO,EAAEhD,sBAAuB;MAChCkD,gBAAgB,EAAEjD,oBAAqB;MACvCxC,UAAU,EAAEJ,WAAW,CAACI;IAAW;MAAA8E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5F,EAAA,CA7QQT,UAAU;AAAA8G,EAAA,GAAV9G,UAAU;AA+QnB,eAAeA,UAAU;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}