{"ast":null,"code":"var _jsxFileName = \"/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { ReactFlow, addEdge, Controls, Background, MiniMap, useReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\nimport ContextMenu from './ContextMenu';\nimport { saveAnimalData } from '../utils/storage-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction FlowCanvas({\n  nodes: initialNodes,\n  edges: initialEdges,\n  onUpdate,\n  onGranjaClick,\n  onAnimalUpdate,\n  canvasId\n}) {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const [contextMenu, setContextMenu] = useState({\n    show: false,\n    position: null,\n    sourceNode: null\n  });\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => {\n      let updatedNodes = [...nds];\n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => node.id === change.id ? {\n            ...node,\n            position: change.position\n          } : node);\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      return updatedNodes;\n    });\n  }, []);\n  const onEdgesChange = useCallback(changes => {\n    setEdges(eds => {\n      let updatedEdges = [...eds];\n      changes.forEach(change => {\n        if (change.type === 'remove') {\n          updatedEdges = updatedEdges.filter(edge => edge.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedEdges = [...updatedEdges, change.item];\n        }\n      });\n      return updatedEdges;\n    });\n  }, []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, []);\n  const onNodeClick = useCallback((event, node) => {\n    console.log('Node clicked:', node);\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n  const onNodeContextMenu = useCallback((event, node) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      sourceNode: node\n    });\n  }, []);\n  const onPaneContextMenu = useCallback(event => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      sourceNode: null\n    });\n  }, []);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    if (onUpdate) {\n      onUpdate(nodes, edges);\n    }\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas apenas na primeira renderização\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, []); // Array vazio para executar apenas uma vez\n\n  // Expor função de salvar SVG globalmente\n  useEffect(() => {\n    window.saveCanvasAsSVG = handleSaveSVG;\n    return () => {\n      delete window.saveCanvasAsSVG;\n    };\n  }, [handleSaveSVG]);\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local dos nós imediatamente\n    setNodes(prevNodes => prevNodes.map(node => node.id === animalId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...animalData,\n        // Atualizar o animalName para refletir no canvas\n        animalName: animalData.nome || node.data.animalName\n      }\n    } : node));\n\n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n\n    // Fechar o painel\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n  const handleCloseContextMenu = useCallback(() => {\n    setContextMenu({\n      show: false,\n      position: null,\n      sourceNode: null\n    });\n  }, []);\n  const handleSaveSVG = useCallback(() => {\n    if (reactFlowInstance) {\n      try {\n        var _reactFlowWrapper$cur;\n        // Obter o elemento SVG do React Flow\n        const svgElement = (_reactFlowWrapper$cur = reactFlowWrapper.current) === null || _reactFlowWrapper$cur === void 0 ? void 0 : _reactFlowWrapper$cur.querySelector('.react-flow__viewport svg');\n        if (svgElement) {\n          // Criar uma cópia do SVG\n          const clonedSvg = svgElement.cloneNode(true);\n\n          // Ajustar o viewBox para incluir todos os nós\n          const bounds = reactFlowInstance.getNodes().reduce((bounds, node) => {\n            bounds.minX = Math.min(bounds.minX, node.position.x);\n            bounds.maxX = Math.max(bounds.maxX, node.position.x + 120);\n            bounds.minY = Math.min(bounds.minY, node.position.y);\n            bounds.maxY = Math.max(bounds.maxY, node.position.y + 80);\n            return bounds;\n          }, {\n            minX: 0,\n            maxX: 0,\n            minY: 0,\n            maxY: 0\n          });\n\n          // Adicionar padding\n          const padding = 50;\n          const width = bounds.maxX - bounds.minX + padding * 2;\n          const height = bounds.maxY - bounds.minY + padding * 2;\n          clonedSvg.setAttribute('viewBox', `${bounds.minX - padding} ${bounds.minY - padding} ${width} ${height}`);\n          clonedSvg.setAttribute('width', width);\n          clonedSvg.setAttribute('height', height);\n\n          // Converter para string SVG\n          const svgData = new XMLSerializer().serializeToString(clonedSvg);\n          const svgBlob = new Blob([svgData], {\n            type: 'image/svg+xml;charset=utf-8'\n          });\n\n          // Criar link de download\n          const url = URL.createObjectURL(svgBlob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `petflow_canvas_${canvasId}_${new Date().toISOString().split('T')[0]}.svg`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n          alert('Canvas salvo como SVG com sucesso!');\n        } else {\n          alert('Erro: Não foi possível encontrar o elemento SVG.');\n        }\n      } catch (error) {\n        console.error('Erro ao salvar SVG:', error);\n        alert('Erro ao salvar SVG. Tente novamente.');\n      }\n    }\n  }, [reactFlowInstance, canvasId]);\n  const handleCreateArtifact = useCallback((artifactType, position) => {\n    const newNodeId = `${artifactType.id}-${Date.now()}`;\n\n    // Gerar nome único para animais\n    let animalName = artifactType.label;\n    if (artifactType.type === 'animal') {\n      const randomIndex = Math.floor(Math.random() * 24);\n      const names = ['Buddy', 'Max', 'Luna', 'Rocky', 'Bella', 'Charlie', 'Lucy', 'Cooper', 'Daisy', 'Bear', 'Molly', 'Duke', 'Sophie', 'Jack', 'Ruby', 'Oliver', 'Chloe', 'Tucker', 'Penny', 'Winston', 'Lola', 'Murphy', 'Zoe', 'Finn'];\n      animalName = names[randomIndex];\n    }\n\n    // Calcular posição do novo nó baseada no nó de origem\n    let newNodePosition;\n    if (contextMenu.sourceNode) {\n      const sourcePos = contextMenu.sourceNode.position;\n      newNodePosition = {\n        x: sourcePos.x + 200,\n        // 200px à direita do nó de origem\n        y: sourcePos.y + 100 // 100px abaixo do nó de origem\n      };\n    } else {\n      // Se não houver nó de origem, usar a posição do clique\n      newNodePosition = {\n        x: position.x - 100,\n        y: position.y - 50\n      };\n    }\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newNodePosition,\n      data: {\n        ...artifactType,\n        animalName: artifactType.type === 'animal' ? animalName : artifactType.label,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      }\n    };\n\n    // Criar uma nova conexão se houver um nó de origem\n    let newEdge = null;\n    if (contextMenu.sourceNode) {\n      const edgeId = `${contextMenu.sourceNode.id}-${newNodeId}`;\n      newEdge = {\n        id: edgeId,\n        source: contextMenu.sourceNode.id,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: false,\n        style: {\n          stroke: contextMenu.sourceNode.data.color || '#666',\n          strokeWidth: 3,\n          strokeDasharray: '5,5' // Linha tracejada para destacar\n        },\n        label: 'Novo',\n        // Label para identificar a conexão\n        labelStyle: {\n          fill: contextMenu.sourceNode.data.color || '#666',\n          fontWeight: 'bold',\n          fontSize: '12px'\n        }\n      };\n    }\n\n    // Adicionar o novo nó e edge\n    setNodes(prevNodes => [...prevNodes, newNode]);\n    if (newEdge) {\n      setEdges(prevEdges => [...prevEdges, newEdge]);\n    }\n\n    // Atualizar o estado global\n    if (onUpdate) {\n      const updatedNodes = [...nodes, newNode];\n      const updatedEdges = newEdge ? [...edges, newEdge] : edges;\n      onUpdate(updatedNodes, updatedEdges);\n    }\n\n    // Se for um animal, salvar dados iniciais no localStorage e abrir painel\n    if (artifactType.type === 'animal') {\n      const initialData = {\n        nome: animalName,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      };\n      saveAnimalData(newNodeId, initialData);\n      setSelectedAnimal(newNode);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [nodes, edges, onUpdate, contextMenu.sourceNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-canvas\",\n    ref: reactFlowWrapper,\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onNodeContextMenu: onNodeContextMenu,\n      onPaneContextMenu: onPaneContextMenu,\n      nodeTypes: nodeTypes,\n      ...FLOW_CONFIG,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.data.type) {\n            case 'granja':\n              return '#ff6b6b';\n            case 'animal':\n              return '#4ecdc4';\n            default:\n              return '#95a5a6';\n          }\n        },\n        nodeStrokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimalDetailsPanel, {\n      animal: selectedAnimal,\n      isOpen: isDetailsPanelOpen,\n      onClose: handleCloseDetailsPanel,\n      onSave: handleSaveAnimal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      position: contextMenu.position,\n      onClose: handleCloseContextMenu,\n      onCreateArtifact: handleCreateArtifact,\n      sourceNode: contextMenu.sourceNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowCanvas, \"ZS4zTBGdSMvdRzj1HSwUIYt3i5Y=\", false, function () {\n  return [useReactFlow];\n});\n_c = FlowCanvas;\nexport default FlowCanvas;\nvar _c;\n$RefreshReg$(_c, \"FlowCanvas\");","map":{"version":3,"names":["React","useCallback","useRef","useState","useEffect","ReactFlow","addEdge","Controls","Background","MiniMap","useReactFlow","CustomNode","FLOW_CONFIG","AnimalDetailsPanel","ContextMenu","saveAnimalData","jsxDEV","_jsxDEV","nodeTypes","custom","FlowCanvas","nodes","initialNodes","edges","initialEdges","onUpdate","onGranjaClick","onAnimalUpdate","canvasId","_s","setNodes","setEdges","selectedAnimal","setSelectedAnimal","isDetailsPanelOpen","setIsDetailsPanelOpen","contextMenu","setContextMenu","show","position","sourceNode","reactFlowWrapper","reactFlowInstance","onNodesChange","changes","nds","updatedNodes","forEach","change","type","map","node","id","filter","item","onEdgesChange","eds","updatedEdges","edge","onConnect","params","onNodeClick","event","console","log","data","onNodeContextMenu","preventDefault","x","clientX","y","clientY","onPaneContextMenu","window","saveCanvasAsSVG","handleSaveSVG","handleSaveAnimal","animalId","animalData","prevNodes","animalName","nome","handleCloseDetailsPanel","handleCloseContextMenu","_reactFlowWrapper$cur","svgElement","current","querySelector","clonedSvg","cloneNode","bounds","getNodes","reduce","minX","Math","min","maxX","max","minY","maxY","padding","width","height","setAttribute","svgData","XMLSerializer","serializeToString","svgBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","Date","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","alert","error","handleCreateArtifact","artifactType","newNodeId","now","label","randomIndex","floor","random","names","newNodePosition","sourcePos","newNode","apelido","peso","idade","responsavel","newEdge","edgeId","source","target","animated","style","stroke","color","strokeWidth","strokeDasharray","labelStyle","fill","fontWeight","fontSize","prevEdges","initialData","className","ref","children","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","gap","nodeColor","nodeStrokeWidth","animal","isOpen","onClose","onSave","onCreateArtifact","_c","$RefreshReg$"],"sources":["/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js"],"sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport {\n  ReactFlow,\n  addEdge,\n  Controls,\n  Background,\n  MiniMap,\n  useReactFlow\n} from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\nimport ContextMenu from './ContextMenu';\nimport { saveAnimalData } from '../utils/storage-utils';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nfunction FlowCanvas({ nodes: initialNodes, edges: initialEdges, onUpdate, onGranjaClick, onAnimalUpdate, canvasId }) {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const [contextMenu, setContextMenu] = useState({ show: false, position: null, sourceNode: null });\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n\n  const onNodesChange = useCallback((changes) => {\n    setNodes((nds) => {\n      let updatedNodes = [...nds];\n      \n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => \n            node.id === change.id \n              ? { ...node, position: change.position }\n              : node\n          );\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      \n      return updatedNodes;\n    });\n  }, []);\n\n  const onEdgesChange = useCallback((changes) => {\n    setEdges((eds) => {\n      let updatedEdges = [...eds];\n      \n      changes.forEach(change => {\n        if (change.type === 'remove') {\n          updatedEdges = updatedEdges.filter(edge => edge.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedEdges = [...updatedEdges, change.item];\n        }\n      });\n      \n      return updatedEdges;\n    });\n  }, []);\n\n  const onConnect = useCallback(\n    (params) => {\n      setEdges((eds) => addEdge(params, eds));\n    },\n    []\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    console.log('Node clicked:', node);\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n\n  const onNodeContextMenu = useCallback((event, node) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: { x: event.clientX, y: event.clientY },\n      sourceNode: node\n    });\n  }, []);\n\n  const onPaneContextMenu = useCallback((event) => {\n    event.preventDefault();\n    setContextMenu({\n      show: true,\n      position: { x: event.clientX, y: event.clientY },\n      sourceNode: null\n    });\n  }, []);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    if (onUpdate) {\n      onUpdate(nodes, edges);\n    }\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas apenas na primeira renderização\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, []); // Array vazio para executar apenas uma vez\n\n  // Expor função de salvar SVG globalmente\n  useEffect(() => {\n    window.saveCanvasAsSVG = handleSaveSVG;\n    \n    return () => {\n      delete window.saveCanvasAsSVG;\n    };\n  }, [handleSaveSVG]);\n\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local dos nós imediatamente\n    setNodes(prevNodes => \n      prevNodes.map(node => \n        node.id === animalId \n          ? { \n              ...node, \n              data: { \n                ...node.data, \n                ...animalData,\n                // Atualizar o animalName para refletir no canvas\n                animalName: animalData.nome || node.data.animalName\n              } \n            }\n          : node\n      )\n    );\n    \n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n    \n    // Fechar o painel\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n\n  const handleCloseContextMenu = useCallback(() => {\n    setContextMenu({ show: false, position: null, sourceNode: null });\n  }, []);\n\n  const handleSaveSVG = useCallback(() => {\n    if (reactFlowInstance) {\n      try {\n        // Obter o elemento SVG do React Flow\n        const svgElement = reactFlowWrapper.current?.querySelector('.react-flow__viewport svg');\n        \n        if (svgElement) {\n          // Criar uma cópia do SVG\n          const clonedSvg = svgElement.cloneNode(true);\n          \n          // Ajustar o viewBox para incluir todos os nós\n          const bounds = reactFlowInstance.getNodes().reduce((bounds, node) => {\n            bounds.minX = Math.min(bounds.minX, node.position.x);\n            bounds.maxX = Math.max(bounds.maxX, node.position.x + 120);\n            bounds.minY = Math.min(bounds.minY, node.position.y);\n            bounds.maxY = Math.max(bounds.maxY, node.position.y + 80);\n            return bounds;\n          }, { minX: 0, maxX: 0, minY: 0, maxY: 0 });\n          \n          // Adicionar padding\n          const padding = 50;\n          const width = bounds.maxX - bounds.minX + padding * 2;\n          const height = bounds.maxY - bounds.minY + padding * 2;\n          \n          clonedSvg.setAttribute('viewBox', `${bounds.minX - padding} ${bounds.minY - padding} ${width} ${height}`);\n          clonedSvg.setAttribute('width', width);\n          clonedSvg.setAttribute('height', height);\n          \n          // Converter para string SVG\n          const svgData = new XMLSerializer().serializeToString(clonedSvg);\n          const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n          \n          // Criar link de download\n          const url = URL.createObjectURL(svgBlob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `petflow_canvas_${canvasId}_${new Date().toISOString().split('T')[0]}.svg`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n          \n          alert('Canvas salvo como SVG com sucesso!');\n        } else {\n          alert('Erro: Não foi possível encontrar o elemento SVG.');\n        }\n      } catch (error) {\n        console.error('Erro ao salvar SVG:', error);\n        alert('Erro ao salvar SVG. Tente novamente.');\n      }\n    }\n  }, [reactFlowInstance, canvasId]);\n\n  const handleCreateArtifact = useCallback((artifactType, position) => {\n    const newNodeId = `${artifactType.id}-${Date.now()}`;\n    \n    // Gerar nome único para animais\n    let animalName = artifactType.label;\n    if (artifactType.type === 'animal') {\n      const randomIndex = Math.floor(Math.random() * 24);\n      const names = ['Buddy', 'Max', 'Luna', 'Rocky', 'Bella', 'Charlie', 'Lucy', 'Cooper', 'Daisy', 'Bear', 'Molly', 'Duke', 'Sophie', 'Jack', 'Ruby', 'Oliver', 'Chloe', 'Tucker', 'Penny', 'Winston', 'Lola', 'Murphy', 'Zoe', 'Finn'];\n      animalName = names[randomIndex];\n    }\n    \n    // Calcular posição do novo nó baseada no nó de origem\n    let newNodePosition;\n    if (contextMenu.sourceNode) {\n      const sourcePos = contextMenu.sourceNode.position;\n      newNodePosition = {\n        x: sourcePos.x + 200, // 200px à direita do nó de origem\n        y: sourcePos.y + 100  // 100px abaixo do nó de origem\n      };\n    } else {\n      // Se não houver nó de origem, usar a posição do clique\n      newNodePosition = { x: position.x - 100, y: position.y - 50 };\n    }\n    \n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newNodePosition,\n      data: {\n        ...artifactType,\n        animalName: artifactType.type === 'animal' ? animalName : artifactType.label,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      }\n    };\n\n    // Criar uma nova conexão se houver um nó de origem\n    let newEdge = null;\n    if (contextMenu.sourceNode) {\n      const edgeId = `${contextMenu.sourceNode.id}-${newNodeId}`;\n      newEdge = {\n        id: edgeId,\n        source: contextMenu.sourceNode.id,\n        target: newNodeId,\n        type: 'smoothstep',\n        animated: false,\n        style: { \n          stroke: contextMenu.sourceNode.data.color || '#666', \n          strokeWidth: 3,\n          strokeDasharray: '5,5' // Linha tracejada para destacar\n        },\n        label: 'Novo', // Label para identificar a conexão\n        labelStyle: {\n          fill: contextMenu.sourceNode.data.color || '#666',\n          fontWeight: 'bold',\n          fontSize: '12px'\n        }\n      };\n    }\n\n    // Adicionar o novo nó e edge\n    setNodes(prevNodes => [...prevNodes, newNode]);\n    if (newEdge) {\n      setEdges(prevEdges => [...prevEdges, newEdge]);\n    }\n    \n    // Atualizar o estado global\n    if (onUpdate) {\n      const updatedNodes = [...nodes, newNode];\n      const updatedEdges = newEdge ? [...edges, newEdge] : edges;\n      onUpdate(updatedNodes, updatedEdges);\n    }\n    \n    // Se for um animal, salvar dados iniciais no localStorage e abrir painel\n    if (artifactType.type === 'animal') {\n      const initialData = {\n        nome: animalName,\n        apelido: '',\n        peso: '',\n        idade: '',\n        responsavel: ''\n      };\n      \n      saveAnimalData(newNodeId, initialData);\n      setSelectedAnimal(newNode);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [nodes, edges, onUpdate, contextMenu.sourceNode]);\n\n  return (\n    <div className=\"flow-canvas\" ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onNodeContextMenu={onNodeContextMenu}\n        onPaneContextMenu={onPaneContextMenu}\n        nodeTypes={nodeTypes}\n        {...FLOW_CONFIG}\n        attributionPosition=\"bottom-left\"\n      >\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n        <MiniMap\n          nodeColor={(node) => {\n            switch (node.data.type) {\n              case 'granja':\n                return '#ff6b6b';\n              case 'animal':\n                return '#4ecdc4';\n              default:\n                return '#95a5a6';\n            }\n          }}\n          nodeStrokeWidth={3}\n        />\n      </ReactFlow>\n      \n      <AnimalDetailsPanel\n        animal={selectedAnimal}\n        isOpen={isDetailsPanelOpen}\n        onClose={handleCloseDetailsPanel}\n        onSave={handleSaveAnimal}\n      />\n      \n      <ContextMenu\n        position={contextMenu.position}\n        onClose={handleCloseContextMenu}\n        onCreateArtifact={handleCreateArtifact}\n        sourceNode={contextMenu.sourceNode}\n      />\n    </div>\n  );\n}\n\nexport default FlowCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}