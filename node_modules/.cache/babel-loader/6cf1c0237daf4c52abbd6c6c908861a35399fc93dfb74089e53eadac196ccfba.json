{"ast":null,"code":"var _jsxFileName = \"/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport ReactFlow, { addEdge, Controls, Background, MiniMap } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction FlowCanvas({\n  nodes: initialNodes,\n  edges: initialEdges,\n  onUpdate,\n  onGranjaClick,\n  canvasId\n}) {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const reactFlowWrapper = useRef(null);\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => {\n      const updatedNodes = nds.map(node => {\n        const change = changes.find(c => c.id === node.id);\n        if (change && change.type === 'position') {\n          return {\n            ...node,\n            position: change.position\n          };\n        }\n        return node;\n      });\n      return updatedNodes;\n    });\n  }, []);\n  const onEdgesChange = useCallback(changes => {\n    setEdges(eds => {\n      const updatedEdges = eds.filter(edge => !changes.some(change => change.id === edge.id && change.type === 'remove'));\n      return updatedEdges;\n    });\n  }, []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, []);\n  const onNodeClick = useCallback((event, node) => {\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    }\n  }, [onGranjaClick]);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    onUpdate(nodes, edges);\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, [initialNodes, initialEdges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-canvas\",\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.data.type) {\n            case 'granja':\n              return '#ff6b6b';\n            case 'animal':\n              return '#4ecdc4';\n            default:\n              return '#95a5a6';\n          }\n        },\n        nodeStrokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowCanvas, \"Xs5Sqrsw7Krm/f24Glgrbk1dp4g=\");\n_c = FlowCanvas;\nexport default FlowCanvas;\nvar _c;\n$RefreshReg$(_c, \"FlowCanvas\");","map":{"version":3,"names":["React","useCallback","useRef","useState","useEffect","ReactFlow","addEdge","Controls","Background","MiniMap","CustomNode","jsxDEV","_jsxDEV","nodeTypes","custom","FlowCanvas","nodes","initialNodes","edges","initialEdges","onUpdate","onGranjaClick","canvasId","_s","setNodes","setEdges","reactFlowWrapper","onNodesChange","changes","nds","updatedNodes","map","node","change","find","c","id","type","position","onEdgesChange","eds","updatedEdges","filter","edge","some","onConnect","params","onNodeClick","event","data","className","ref","children","fitView","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","nodeColor","nodeStrokeWidth","_c","$RefreshReg$"],"sources":["/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js"],"sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Controls,\n  Background,\n  MiniMap\n} from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nfunction FlowCanvas({ nodes: initialNodes, edges: initialEdges, onUpdate, onGranjaClick, canvasId }) {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const reactFlowWrapper = useRef(null);\n\n  const onNodesChange = useCallback((changes) => {\n    setNodes((nds) => {\n      const updatedNodes = nds.map(node => {\n        const change = changes.find(c => c.id === node.id);\n        if (change && change.type === 'position') {\n          return { ...node, position: change.position };\n        }\n        return node;\n      });\n      return updatedNodes;\n    });\n  }, []);\n\n  const onEdgesChange = useCallback((changes) => {\n    setEdges((eds) => {\n      const updatedEdges = eds.filter(edge => \n        !changes.some(change => change.id === edge.id && change.type === 'remove')\n      );\n      return updatedEdges;\n    });\n  }, []);\n\n  const onConnect = useCallback(\n    (params) => {\n      setEdges((eds) => addEdge(params, eds));\n    },\n    []\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    }\n  }, [onGranjaClick]);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    onUpdate(nodes, edges);\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, [initialNodes, initialEdges]);\n\n  return (\n    <div className=\"flow-canvas\" ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        nodeTypes={nodeTypes}\n        fitView\n        attributionPosition=\"bottom-left\"\n      >\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n        <MiniMap\n          nodeColor={(node) => {\n            switch (node.data.type) {\n              case 'granja':\n                return '#ff6b6b';\n              case 'animal':\n                return '#4ecdc4';\n              default:\n                return '#95a5a6';\n            }\n          }}\n          nodeStrokeWidth={3}\n        />\n      </ReactFlow>\n    </div>\n  );\n}\n\nexport default FlowCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}