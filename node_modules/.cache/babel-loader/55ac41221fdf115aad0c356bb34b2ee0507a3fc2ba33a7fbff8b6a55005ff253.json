{"ast":null,"code":"var _jsxFileName = \"/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { ReactFlow, addEdge, Controls, Background, MiniMap } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction FlowCanvas({\n  nodes: initialNodes,\n  edges: initialEdges,\n  onUpdate,\n  onGranjaClick,\n  onAnimalUpdate,\n  canvasId\n}) {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => {\n      let updatedNodes = [...nds];\n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => node.id === change.id ? {\n            ...node,\n            position: change.position\n          } : node);\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      return updatedNodes;\n    });\n  }, []);\n  const onEdgesChange = useCallback(changes => {\n    setEdges(eds => {\n      const updatedEdges = eds.filter(edge => !changes.some(change => change.id === edge.id && change.type === 'remove'));\n      return updatedEdges;\n    });\n  }, []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, []);\n  const onNodeClick = useCallback((event, node) => {\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    onUpdate(nodes, edges);\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, [initialNodes, initialEdges]);\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local\n    setNodes(prevNodes => prevNodes.map(node => node.id === animalId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...animalData\n      }\n    } : node));\n\n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-canvas\",\n    ref: reactFlowWrapper,\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      nodeTypes: nodeTypes,\n      ...FLOW_CONFIG,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.data.type) {\n            case 'granja':\n              return '#ff6b6b';\n            case 'animal':\n              return '#4ecdc4';\n            default:\n              return '#95a5a6';\n          }\n        },\n        nodeStrokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimalDetailsPanel, {\n      animal: selectedAnimal,\n      isOpen: isDetailsPanelOpen,\n      onClose: handleCloseDetailsPanel,\n      onSave: handleSaveAnimal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowCanvas, \"i8p7UqUD0oP/Uy1kV2A0C1+jkk8=\");\n_c = FlowCanvas;\nexport default FlowCanvas;\nvar _c;\n$RefreshReg$(_c, \"FlowCanvas\");","map":{"version":3,"names":["React","useCallback","useRef","useState","useEffect","ReactFlow","addEdge","Controls","Background","MiniMap","CustomNode","FLOW_CONFIG","AnimalDetailsPanel","jsxDEV","_jsxDEV","nodeTypes","custom","FlowCanvas","nodes","initialNodes","edges","initialEdges","onUpdate","onGranjaClick","onAnimalUpdate","canvasId","_s","setNodes","setEdges","selectedAnimal","setSelectedAnimal","isDetailsPanelOpen","setIsDetailsPanelOpen","reactFlowWrapper","onNodesChange","changes","nds","updatedNodes","forEach","change","type","map","node","id","position","filter","item","onEdgesChange","eds","updatedEdges","edge","some","onConnect","params","onNodeClick","event","data","handleSaveAnimal","animalId","animalData","prevNodes","handleCloseDetailsPanel","className","ref","children","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","nodeColor","nodeStrokeWidth","animal","isOpen","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/indiamaris/CODE/petflow/src/components/FlowCanvas.js"],"sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport {\n  ReactFlow,\n  addEdge,\n  Controls,\n  Background,\n  MiniMap\n} from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport './FlowCanvas.css';\nimport CustomNode from './CustomNode';\nimport { FLOW_CONFIG } from '../config/flow-config';\nimport AnimalDetailsPanel from './AnimalDetailsPanel';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nfunction FlowCanvas({ nodes: initialNodes, edges: initialEdges, onUpdate, onGranjaClick, onAnimalUpdate, canvasId }) {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [isDetailsPanelOpen, setIsDetailsPanelOpen] = useState(false);\n  const reactFlowWrapper = useRef(null);\n\n  const onNodesChange = useCallback((changes) => {\n    setNodes((nds) => {\n      let updatedNodes = [...nds];\n      \n      changes.forEach(change => {\n        if (change.type === 'position') {\n          updatedNodes = updatedNodes.map(node => \n            node.id === change.id \n              ? { ...node, position: change.position }\n              : node\n          );\n        } else if (change.type === 'remove') {\n          updatedNodes = updatedNodes.filter(node => node.id !== change.id);\n        } else if (change.type === 'add') {\n          updatedNodes = [...updatedNodes, change.item];\n        }\n      });\n      \n      return updatedNodes;\n    });\n  }, []);\n\n  const onEdgesChange = useCallback((changes) => {\n    setEdges((eds) => {\n      const updatedEdges = eds.filter(edge => \n        !changes.some(change => change.id === edge.id && change.type === 'remove')\n      );\n      return updatedEdges;\n    });\n  }, []);\n\n  const onConnect = useCallback(\n    (params) => {\n      setEdges((eds) => addEdge(params, eds));\n    },\n    []\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    if (node.data.type === 'granja') {\n      onGranjaClick(node.id);\n    } else if (node.data.type === 'animal') {\n      setSelectedAnimal(node);\n      setIsDetailsPanelOpen(true);\n    }\n  }, [onGranjaClick]);\n\n  // Atualizar o estado global quando os nós ou edges mudarem\n  useEffect(() => {\n    onUpdate(nodes, edges);\n  }, [nodes, edges, onUpdate]);\n\n  // Sincronizar com as mudanças externas\n  useEffect(() => {\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  }, [initialNodes, initialEdges]);\n\n  const handleSaveAnimal = useCallback((animalId, animalData) => {\n    // Atualizar o estado local\n    setNodes(prevNodes => \n      prevNodes.map(node => \n        node.id === animalId \n          ? { ...node, data: { ...node.data, ...animalData } }\n          : node\n      )\n    );\n    \n    // Atualizar o estado global\n    if (onAnimalUpdate) {\n      onAnimalUpdate(animalId, animalData);\n    }\n    \n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, [onAnimalUpdate]);\n\n  const handleCloseDetailsPanel = useCallback(() => {\n    setIsDetailsPanelOpen(false);\n    setSelectedAnimal(null);\n  }, []);\n\n  return (\n    <div className=\"flow-canvas\" ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        nodeTypes={nodeTypes}\n        {...FLOW_CONFIG}\n        attributionPosition=\"bottom-left\"\n      >\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n        <MiniMap\n          nodeColor={(node) => {\n            switch (node.data.type) {\n              case 'granja':\n                return '#ff6b6b';\n              case 'animal':\n                return '#4ecdc4';\n              default:\n                return '#95a5a6';\n            }\n          }}\n          nodeStrokeWidth={3}\n        />\n      </ReactFlow>\n      \n      <AnimalDetailsPanel\n        animal={selectedAnimal}\n        isOpen={isDetailsPanelOpen}\n        onClose={handleCloseDetailsPanel}\n        onSave={handleSaveAnimal}\n      />\n    </div>\n  );\n}\n\nexport default FlowCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}