{"ast":null,"code":"var _jsxFileName = \"/Users/indiamaris/CODE/petflow/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport ControlPanel from './components/ControlPanel';\nimport FlowCanvas from './components/FlowCanvas';\nimport { generateInitialEdges, generateInitialNodes } from './utils/flow-utils';\nimport { getAnimalsData, getCanvasState, saveCanvasState } from './utils/storage-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentCanvasId, setCurrentCanvasId] = useState('main');\n  const [canvases, setCanvases] = useState({\n    main: {\n      id: 'main',\n      name: 'Canvas Principal',\n      nodes: generateInitialNodes(),\n      edges: generateInitialEdges(),\n      parentId: null\n    }\n  });\n  const [highlightedNodes, setHighlightedNodes] = useState(new Set());\n\n  // Carregar dados salvos do localStorage na inicialização\n  useEffect(() => {\n    const savedCanvasState = getCanvasState();\n    const savedAnimalsData = getAnimalsData();\n    if (Object.keys(savedCanvasState).length > 0) {\n      setCanvases(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(savedCanvasState).forEach(canvasId => {\n          if (updated[canvasId]) {\n            updated[canvasId] = {\n              ...updated[canvasId],\n              nodes: savedCanvasState[canvasId].nodes || updated[canvasId].nodes,\n              edges: savedCanvasState[canvasId].edges || updated[canvasId].edges\n            };\n          }\n        });\n        return updated;\n      });\n    }\n\n    // Aplicar dados salvos dos animais aos nós existentes\n    if (Object.keys(savedAnimalsData).length > 0) {\n      setCanvases(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(updated).forEach(canvasId => {\n          updated[canvasId] = {\n            ...updated[canvasId],\n            nodes: updated[canvasId].nodes.map(node => {\n              if (savedAnimalsData[node.id]) {\n                return {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    ...savedAnimalsData[node.id]\n                  }\n                };\n              }\n              return node;\n            })\n          };\n        });\n        return updated;\n      });\n    }\n  }, []);\n  const handleMatilhaClick = matilhaId => {\n    const newCanvasId = `matilha-${matilhaId}`;\n    if (!canvases[newCanvasId]) {\n      // Criar novo canvas para esta matilha\n      const newCanvas = {\n        id: newCanvasId,\n        name: `Matilha ${matilhaId}`,\n        nodes: generateInitialNodes(matilhaId),\n        edges: generateInitialEdges(matilhaId),\n        parentId: currentCanvasId\n      };\n      setCanvases(prev => ({\n        ...prev,\n        [newCanvasId]: newCanvas\n      }));\n    }\n    setCurrentCanvasId(newCanvasId);\n\n    // Aplicar highlight na matilha clicada\n    handleMatilhaHighlight(matilhaId);\n  };\n  const handleMatilhaHighlight = matilhaId => {\n    if (!matilhaId) {\n      setHighlightedNodes(new Set());\n      return;\n    }\n\n    // Encontrar apenas os nós filhos da matilha (hierarquia descendente)\n    const currentCanvas = canvases[currentCanvasId];\n    if (!currentCanvas) return;\n    const nodesToHighlight = new Set();\n    nodesToHighlight.add(matilhaId); // Adicionar a própria matilha\n\n    // Função recursiva para encontrar apenas os filhos (não os pais)\n    const findChildren = parentId => {\n      currentCanvas.edges.forEach(edge => {\n        // Só adicionar se o edge vai DO pai PARA o filho (hierarquia descendente)\n        if (edge.source === parentId && !nodesToHighlight.has(edge.target)) {\n          nodesToHighlight.add(edge.target);\n          findChildren(edge.target); // Recursivamente encontrar filhos dos filhos\n        }\n      });\n    };\n\n    // Encontrar todos os filhos da matilha\n    findChildren(matilhaId);\n    setHighlightedNodes(nodesToHighlight);\n  };\n  const handleBackToMain = () => {\n    setCurrentCanvasId('main');\n    // Limpar highlight ao voltar ao canvas principal\n    setHighlightedNodes(new Set());\n  };\n  const handleCanvasUpdate = (nodes, edges) => {\n    setCanvases(prev => ({\n      ...prev,\n      [currentCanvasId]: {\n        ...prev[currentCanvasId],\n        nodes,\n        edges\n      }\n    }));\n\n    // Salvar estado do canvas no localStorage\n    saveCanvasState(currentCanvasId, nodes, edges);\n  };\n  const handleAnimalUpdate = (animalId, animalData) => {\n    setCanvases(prev => {\n      const updatedCanvas = {\n        ...prev[currentCanvasId],\n        nodes: prev[currentCanvasId].nodes.map(node => node.id === animalId ? {\n          ...node,\n          data: {\n            ...node.data,\n            ...animalData,\n            // Atualizar o animalName para refletir no canvas\n            animalName: animalData.nome || node.data.animalName\n          }\n        } : node),\n        edges: prev[currentCanvasId].edges\n      };\n\n      // Salvar estado atualizado no localStorage\n      saveCanvasState(currentCanvasId, updatedCanvas.nodes, updatedCanvas.edges);\n      return {\n        ...prev,\n        [currentCanvasId]: updatedCanvas\n      };\n    });\n  };\n  const handleSaveSVG = canvasId => {\n    // Esta função será implementada no FlowCanvas\n    // Por enquanto, vamos apenas passar a referência\n    if (window.saveCanvasAsSVG) {\n      window.saveCanvasAsSVG(canvasId);\n    }\n  };\n  const currentCanvas = canvases[currentCanvasId];\n\n  // Verificar se o canvas atual existe\n  if (!currentCanvas) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"PetFlow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), currentCanvasId !== 'main' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackToMain,\n        children: \"\\u2190 Voltar ao Canvas Principal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(FlowCanvas, {\n        nodes: currentCanvas.nodes,\n        edges: currentCanvas.edges,\n        onUpdate: handleCanvasUpdate,\n        onMatilhaClick: handleMatilhaClick,\n        onAnimalUpdate: handleAnimalUpdate,\n        canvasId: currentCanvasId,\n        highlightedNodes: highlightedNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), console.log('App - highlightedNodes:', highlightedNodes), /*#__PURE__*/_jsxDEV(ControlPanel, {\n        canvases: canvases,\n        currentCanvasId: currentCanvasId,\n        onCanvasSelect: canvasId => {\n          setCurrentCanvasId(canvasId);\n          // Limpar highlight ao mudar de canvas\n          setHighlightedNodes(new Set());\n        },\n        onMatilhaClick: handleMatilhaClick,\n        onMatilhaHighlight: handleMatilhaHighlight,\n        onSaveSVG: () => handleSaveSVG(currentCanvasId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JxhqE05Z5fwtisuifgRJX1KJ+wM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ControlPanel","FlowCanvas","generateInitialEdges","generateInitialNodes","getAnimalsData","getCanvasState","saveCanvasState","jsxDEV","_jsxDEV","App","_s","currentCanvasId","setCurrentCanvasId","canvases","setCanvases","main","id","name","nodes","edges","parentId","highlightedNodes","setHighlightedNodes","Set","savedCanvasState","savedAnimalsData","Object","keys","length","prev","updated","forEach","canvasId","map","node","data","handleMatilhaClick","matilhaId","newCanvasId","newCanvas","handleMatilhaHighlight","currentCanvas","nodesToHighlight","add","findChildren","edge","source","has","target","handleBackToMain","handleCanvasUpdate","handleAnimalUpdate","animalId","animalData","updatedCanvas","animalName","nome","handleSaveSVG","window","saveCanvasAsSVG","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onUpdate","onMatilhaClick","onAnimalUpdate","console","log","onCanvasSelect","onMatilhaHighlight","onSaveSVG","_c","$RefreshReg$"],"sources":["/Users/indiamaris/CODE/petflow/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport ControlPanel from './components/ControlPanel';\nimport FlowCanvas from './components/FlowCanvas';\nimport { generateInitialEdges, generateInitialNodes } from './utils/flow-utils';\nimport { getAnimalsData, getCanvasState, saveCanvasState } from './utils/storage-utils';\n\nfunction App() {\n  const [currentCanvasId, setCurrentCanvasId] = useState('main');\n  const [canvases, setCanvases] = useState({\n    main: {\n      id: 'main',\n      name: 'Canvas Principal',\n      nodes: generateInitialNodes(),\n      edges: generateInitialEdges(),\n      parentId: null\n    }\n  });\n  const [highlightedNodes, setHighlightedNodes] = useState(new Set());\n\n  // Carregar dados salvos do localStorage na inicialização\n  useEffect(() => {\n    const savedCanvasState = getCanvasState();\n    const savedAnimalsData = getAnimalsData();\n    \n    if (Object.keys(savedCanvasState).length > 0) {\n      setCanvases(prev => {\n        const updated = { ...prev };\n        \n        Object.keys(savedCanvasState).forEach(canvasId => {\n          if (updated[canvasId]) {\n            updated[canvasId] = {\n              ...updated[canvasId],\n              nodes: savedCanvasState[canvasId].nodes || updated[canvasId].nodes,\n              edges: savedCanvasState[canvasId].edges || updated[canvasId].edges\n            };\n          }\n        });\n        \n        return updated;\n      });\n    }\n    \n    // Aplicar dados salvos dos animais aos nós existentes\n    if (Object.keys(savedAnimalsData).length > 0) {\n      setCanvases(prev => {\n        const updated = { ...prev };\n        \n        Object.keys(updated).forEach(canvasId => {\n          updated[canvasId] = {\n            ...updated[canvasId],\n            nodes: updated[canvasId].nodes.map(node => {\n              if (savedAnimalsData[node.id]) {\n                return {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    ...savedAnimalsData[node.id]\n                  }\n                };\n              }\n              return node;\n            })\n          };\n        });\n        \n        return updated;\n      });\n    }\n  }, []);\n\n  const handleMatilhaClick = (matilhaId) => {\n    const newCanvasId = `matilha-${matilhaId}`;\n    \n    if (!canvases[newCanvasId]) {\n      // Criar novo canvas para esta matilha\n      const newCanvas = {\n        id: newCanvasId,\n        name: `Matilha ${matilhaId}`,\n        nodes: generateInitialNodes(matilhaId),\n        edges: generateInitialEdges(matilhaId),\n        parentId: currentCanvasId\n      };\n      \n      setCanvases(prev => ({\n        ...prev,\n        [newCanvasId]: newCanvas\n      }));\n    }\n    \n    setCurrentCanvasId(newCanvasId);\n    \n    // Aplicar highlight na matilha clicada\n    handleMatilhaHighlight(matilhaId);\n  };\n\n  const handleMatilhaHighlight = (matilhaId) => {\n    if (!matilhaId) {\n      setHighlightedNodes(new Set());\n      return;\n    }\n    \n    // Encontrar apenas os nós filhos da matilha (hierarquia descendente)\n    const currentCanvas = canvases[currentCanvasId];\n    if (!currentCanvas) return;\n    \n    const nodesToHighlight = new Set();\n    nodesToHighlight.add(matilhaId); // Adicionar a própria matilha\n    \n    // Função recursiva para encontrar apenas os filhos (não os pais)\n    const findChildren = (parentId) => {\n      currentCanvas.edges.forEach(edge => {\n        // Só adicionar se o edge vai DO pai PARA o filho (hierarquia descendente)\n        if (edge.source === parentId && !nodesToHighlight.has(edge.target)) {\n          nodesToHighlight.add(edge.target);\n          findChildren(edge.target); // Recursivamente encontrar filhos dos filhos\n        }\n      });\n    };\n    \n    // Encontrar todos os filhos da matilha\n    findChildren(matilhaId);\n    \n    setHighlightedNodes(nodesToHighlight);\n  };\n\n  const handleBackToMain = () => {\n    setCurrentCanvasId('main');\n    // Limpar highlight ao voltar ao canvas principal\n    setHighlightedNodes(new Set());\n  };\n\n  const handleCanvasUpdate = (nodes, edges) => {\n    setCanvases(prev => ({\n      ...prev,\n      [currentCanvasId]: {\n        ...prev[currentCanvasId],\n        nodes,\n        edges\n      }\n    }));\n    \n    // Salvar estado do canvas no localStorage\n    saveCanvasState(currentCanvasId, nodes, edges);\n  };\n\n  const handleAnimalUpdate = (animalId, animalData) => {\n    setCanvases(prev => {\n      const updatedCanvas = {\n        ...prev[currentCanvasId],\n        nodes: prev[currentCanvasId].nodes.map(node => \n          node.id === animalId \n            ? { \n                ...node, \n                data: { \n                  ...node.data, \n                  ...animalData,\n                  // Atualizar o animalName para refletir no canvas\n                  animalName: animalData.nome || node.data.animalName\n                } \n              }\n            : node\n        ),\n        edges: prev[currentCanvasId].edges\n      };\n      \n      // Salvar estado atualizado no localStorage\n      saveCanvasState(currentCanvasId, updatedCanvas.nodes, updatedCanvas.edges);\n      \n      return {\n        ...prev,\n        [currentCanvasId]: updatedCanvas\n      };\n    });\n  };\n\n  const handleSaveSVG = (canvasId) => {\n    // Esta função será implementada no FlowCanvas\n    // Por enquanto, vamos apenas passar a referência\n    if (window.saveCanvasAsSVG) {\n      window.saveCanvasAsSVG(canvasId);\n    }\n  };\n\n  const currentCanvas = canvases[currentCanvasId];\n\n  // Verificar se o canvas atual existe\n  if (!currentCanvas) {\n    return <div>Carregando...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>PetFlow</h1>\n        {currentCanvasId !== 'main' && (\n          <button className=\"back-button\" onClick={handleBackToMain}>\n            ← Voltar ao Canvas Principal\n          </button>\n        )}\n      </header>\n      \n      <div className=\"main-container\">\n        <FlowCanvas\n          nodes={currentCanvas.nodes}\n          edges={currentCanvas.edges}\n          onUpdate={handleCanvasUpdate}\n          onMatilhaClick={handleMatilhaClick}\n          onAnimalUpdate={handleAnimalUpdate}\n          canvasId={currentCanvasId}\n          highlightedNodes={highlightedNodes}\n        />\n        {/* Debug */}\n        {console.log('App - highlightedNodes:', highlightedNodes)}\n        <ControlPanel\n          canvases={canvases}\n          currentCanvasId={currentCanvasId}\n          onCanvasSelect={(canvasId) => {\n            setCurrentCanvasId(canvasId);\n            // Limpar highlight ao mudar de canvas\n            setHighlightedNodes(new Set());\n          }}\n          onMatilhaClick={handleMatilhaClick}\n          onMatilhaHighlight={handleMatilhaHighlight}\n          onSaveSVG={() => handleSaveSVG(currentCanvasId)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}