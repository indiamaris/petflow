{"ast":null,"code":"// Chaves para o localStorage\nconst STORAGE_KEYS = {\n  ANIMALS_DATA: 'petflow_animals_data',\n  GRANJAS_DATA: 'petflow_granjas_data',\n  CANVAS_STATE: 'petflow_canvas_state'\n};\n\n// Função para salvar dados dos animais\nexport const saveAnimalData = (animalId, animalData) => {\n  try {\n    const existingData = getAnimalsData();\n    existingData[animalId] = {\n      ...existingData[animalId],\n      ...animalData,\n      lastUpdated: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.ANIMALS_DATA, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar dados do animal:', error);\n    return false;\n  }\n};\n\n// Função para obter dados dos animais\nexport const getAnimalsData = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.ANIMALS_DATA);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter dados dos animais:', error);\n    return {};\n  }\n};\n\n// Função para obter dados de um animal específico\nexport const getAnimalData = animalId => {\n  const animalsData = getAnimalsData();\n  return animalsData[animalId] || null;\n};\n\n// Função para salvar dados das granjas\nexport const saveGranjaData = (granjaId, granjaData) => {\n  try {\n    const existingData = getGranjasData();\n    existingData[granjaId] = {\n      ...existingData[granjaId],\n      ...granjaData,\n      lastUpdated: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.GRANJAS_DATA, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar dados da granja:', error);\n    return false;\n  }\n};\n\n// Função para obter dados das granjas\nexport const getGranjasData = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.GRANJAS_DATA);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter dados das granjas:', error);\n    return {};\n  }\n};\n\n// Função para salvar estado do canvas\nexport const saveCanvasState = (canvasId, nodes, edges) => {\n  try {\n    const existingData = getCanvasState();\n    existingData[canvasId] = {\n      nodes,\n      edges,\n      lastUpdated: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.CANVAS_STATE, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar estado do canvas:', error);\n    return false;\n  }\n};\n\n// Função para obter estado do canvas\nexport const getCanvasState = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.CANVAS_STATE);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter estado do canvas:', error);\n    return {};\n  }\n};\n\n// Função para limpar todos os dados\nexport const clearAllData = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEYS.ANIMALS_DATA);\n    localStorage.removeItem(STORAGE_KEYS.GRANJAS_DATA);\n    localStorage.removeItem(STORAGE_KEYS.CANVAS_STATE);\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar dados:', error);\n    return false;\n  }\n};\n\n// Função para exportar todos os dados\nexport const exportAllData = () => {\n  try {\n    const data = {\n      animals: getAnimalsData(),\n      granjas: getGranjasData(),\n      canvas: getCanvasState(),\n      exportedAt: new Date().toISOString()\n    };\n    const blob = new Blob([JSON.stringify(data, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `petflow_data_${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    console.error('Erro ao exportar dados:', error);\n    return false;\n  }\n};\n\n// Função para importar dados\nexport const importData = jsonData => {\n  try {\n    const data = JSON.parse(jsonData);\n    if (data.animals) {\n      localStorage.setItem(STORAGE_KEYS.ANIMALS_DATA, JSON.stringify(data.animals));\n    }\n    if (data.granjas) {\n      localStorage.setItem(STORAGE_KEYS.GRANJAS_DATA, JSON.stringify(data.granjas));\n    }\n    if (data.canvas) {\n      localStorage.setItem(STORAGE_KEYS.CANVAS_STATE, JSON.stringify(data.canvas));\n    }\n    return true;\n  } catch (error) {\n    console.error('Erro ao importar dados:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["STORAGE_KEYS","ANIMALS_DATA","GRANJAS_DATA","CANVAS_STATE","saveAnimalData","animalId","animalData","existingData","getAnimalsData","lastUpdated","Date","toISOString","localStorage","setItem","JSON","stringify","error","console","data","getItem","parse","getAnimalData","animalsData","saveGranjaData","granjaId","granjaData","getGranjasData","saveCanvasState","canvasId","nodes","edges","getCanvasState","clearAllData","removeItem","exportAllData","animals","granjas","canvas","exportedAt","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","split","click","revokeObjectURL","importData","jsonData"],"sources":["/Users/indiamaris/CODE/petflow/src/utils/storage-utils.js"],"sourcesContent":["// Chaves para o localStorage\nconst STORAGE_KEYS = {\n  ANIMALS_DATA: 'petflow_animals_data',\n  GRANJAS_DATA: 'petflow_granjas_data',\n  CANVAS_STATE: 'petflow_canvas_state'\n};\n\n// Função para salvar dados dos animais\nexport const saveAnimalData = (animalId, animalData) => {\n  try {\n    const existingData = getAnimalsData();\n    existingData[animalId] = {\n      ...existingData[animalId],\n      ...animalData,\n      lastUpdated: new Date().toISOString()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.ANIMALS_DATA, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar dados do animal:', error);\n    return false;\n  }\n};\n\n// Função para obter dados dos animais\nexport const getAnimalsData = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.ANIMALS_DATA);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter dados dos animais:', error);\n    return {};\n  }\n};\n\n// Função para obter dados de um animal específico\nexport const getAnimalData = (animalId) => {\n  const animalsData = getAnimalsData();\n  return animalsData[animalId] || null;\n};\n\n// Função para salvar dados das granjas\nexport const saveGranjaData = (granjaId, granjaData) => {\n  try {\n    const existingData = getGranjasData();\n    existingData[granjaId] = {\n      ...existingData[granjaId],\n      ...granjaData,\n      lastUpdated: new Date().toISOString()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.GRANJAS_DATA, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar dados da granja:', error);\n    return false;\n  }\n};\n\n// Função para obter dados das granjas\nexport const getGranjasData = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.GRANJAS_DATA);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter dados das granjas:', error);\n    return {};\n  }\n};\n\n// Função para salvar estado do canvas\nexport const saveCanvasState = (canvasId, nodes, edges) => {\n  try {\n    const existingData = getCanvasState();\n    existingData[canvasId] = {\n      nodes,\n      edges,\n      lastUpdated: new Date().toISOString()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.CANVAS_STATE, JSON.stringify(existingData));\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar estado do canvas:', error);\n    return false;\n  }\n};\n\n// Função para obter estado do canvas\nexport const getCanvasState = () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEYS.CANVAS_STATE);\n    return data ? JSON.parse(data) : {};\n  } catch (error) {\n    console.error('Erro ao obter estado do canvas:', error);\n    return {};\n  }\n};\n\n// Função para limpar todos os dados\nexport const clearAllData = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEYS.ANIMALS_DATA);\n    localStorage.removeItem(STORAGE_KEYS.GRANJAS_DATA);\n    localStorage.removeItem(STORAGE_KEYS.CANVAS_STATE);\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar dados:', error);\n    return false;\n  }\n};\n\n// Função para exportar todos os dados\nexport const exportAllData = () => {\n  try {\n    const data = {\n      animals: getAnimalsData(),\n      granjas: getGranjasData(),\n      canvas: getCanvasState(),\n      exportedAt: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `petflow_data_${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao exportar dados:', error);\n    return false;\n  }\n};\n\n// Função para importar dados\nexport const importData = (jsonData) => {\n  try {\n    const data = JSON.parse(jsonData);\n    \n    if (data.animals) {\n      localStorage.setItem(STORAGE_KEYS.ANIMALS_DATA, JSON.stringify(data.animals));\n    }\n    \n    if (data.granjas) {\n      localStorage.setItem(STORAGE_KEYS.GRANJAS_DATA, JSON.stringify(data.granjas));\n    }\n    \n    if (data.canvas) {\n      localStorage.setItem(STORAGE_KEYS.CANVAS_STATE, JSON.stringify(data.canvas));\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao importar dados:', error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}